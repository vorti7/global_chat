type Chat @aws_cognito_user_pools @aws_iam {
	id: ID!
	name: String!
	content: String
}

input ModelBooleanFilterInput {
	ne: Boolean
	eq: Boolean
}

input ModelFloatFilterInput {
	ne: Float
	eq: Float
	le: Float
	lt: Float
	ge: Float
	gt: Float
	contains: Float
	notContains: Float
	between: [Float]
}

input ModelIDFilterInput {
	ne: ID
	eq: ID
	le: ID
	lt: ID
	ge: ID
	gt: ID
	contains: ID
	notContains: ID
	between: [ID]
	beginsWith: ID
}

input ModelIntFilterInput {
	ne: Int
	eq: Int
	le: Int
	lt: Int
	ge: Int
	gt: Int
	contains: Int
	notContains: Int
	between: [Int]
}

enum ModelSortDirection {
	ASC
	DESC
}

input ModelStringFilterInput {
	ne: String
	eq: String
	le: String
	lt: String
	ge: String
	gt: String
	contains: String
	notContains: String
	between: [String]
	beginsWith: String
}

type ModelChatConnection {
	items: [Chat]
	nextToken: String
}

input ModelChatFilterInput {
	id: ModelIDFilterInput
	name: ModelStringFilterInput
	description: ModelStringFilterInput
	and: [ModelChatFilterInput]
	or: [ModelChatFilterInput]
	not: ModelChatFilterInput
}

type Mutation {
	createChat(input: CreateChatInput!): Chat
		@aws_iam
	updateChat(input: UpdateChatInput!): Chat
	deleteChat(input: DeleteChatInput!): Chat
 	globalChat(input: GlobalChatInput!): Chat
		@aws_iam
}

input CreateChatInput {
	id: ID
	name: String!
	content: String
}

input UpdateChatInput {
	id: ID!
	name: String
	content: String
}

input DeleteChatInput {
	id: ID
}

input GlobalChatInput {
	id: ID
	name: String!
	content: String
}

type Query {
	getChat(id: ID!): Chat
	listChats(filter: ModelChatFilterInput, limit: Int, nextToken: String): ModelChatConnection
}

type Subscription {
	onCreateChat: Chat
		@aws_subscribe(mutations: ["createChat"])
	onUpdateChat: Chat
		@aws_subscribe(mutations: ["updateChat"])
	onDeleteChat: Chat
		@aws_subscribe(mutations: ["deleteChat"])
	onGlobalChat: Chat
		@aws_subscribe(mutations: ["globalChat"])
}
